@page "/weathergrid"
@inject WeatherProvider Provider
@inject IServiceProvider ServiceProvider
@inject KeyedFluxGateStore<GridState, Guid> KeyedStore

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

<div class="grid">

    <QuickGrid TGridItem="WeatherForecast" ItemsProvider="this.GetItemsAsync" Pagination="_pagination" @ref="_quickGrid">
        <PropertyColumn Title="Date" Property="(item) => item.Date" />
        <PropertyColumn Title="Temperature &deg;C" Property="(item) => item.TemperatureC" />
        <PropertyColumn Title="Temperature &deg;F" Property="(item) => item.TemperatureF" />
        <PropertyColumn Title="Summary" Property="(item) => item.Summary" />
    </QuickGrid>

</div>

<Paginator State="_pagination" />


@code {
    [Parameter] public int DefaultPageSize { get; set; } = 10;

    private static Guid PageUid = Guid.NewGuid();
    private QuickGrid<WeatherForecast>? _quickGrid;
    private PaginationState _pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        var store = KeyedStore.GetOrCreateStore(PageUid, new GridState(0, this.DefaultPageSize));
        _pagination.ItemsPerPage = store.Item.PageSize;
        await _pagination.SetCurrentPageIndexAsync(store.Item.Page);
    }

    private ValueTask<GridItemsProviderResult<WeatherForecast>> GetItemsAsync(GridItemsProviderRequest<WeatherForecast> request)
    {
        this.KeyedStore.Dispatch(PageUid, new UpdateGridPaging(StartIndex: request.StartIndex, PageSize: request.Count ?? this.DefaultPageSize));
        return Provider.GetItemsAsync(request);
    }
}
